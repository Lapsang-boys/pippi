// Code generated by protoc-gen-go. DO NOT EDIT.
// source: alvriket.proto

package alvriket

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ParseELFRequest struct {
	// ELF file path.
	ElfPath              string   `protobuf:"bytes,1,opt,name=elf_path,json=elfPath,proto3" json:"elf_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParseELFRequest) Reset()         { *m = ParseELFRequest{} }
func (m *ParseELFRequest) String() string { return proto.CompactTextString(m) }
func (*ParseELFRequest) ProtoMessage()    {}
func (*ParseELFRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c7237feaeed80f8, []int{0}
}

func (m *ParseELFRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParseELFRequest.Unmarshal(m, b)
}
func (m *ParseELFRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParseELFRequest.Marshal(b, m, deterministic)
}
func (m *ParseELFRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseELFRequest.Merge(m, src)
}
func (m *ParseELFRequest) XXX_Size() int {
	return xxx_messageInfo_ParseELFRequest.Size(m)
}
func (m *ParseELFRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseELFRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ParseELFRequest proto.InternalMessageInfo

func (m *ParseELFRequest) GetElfPath() string {
	if m != nil {
		return m.ElfPath
	}
	return ""
}

type ParseELFReply struct {
	// Number of sections.
	Nsects               int32    `protobuf:"varint,1,opt,name=nsects,proto3" json:"nsects,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParseELFReply) Reset()         { *m = ParseELFReply{} }
func (m *ParseELFReply) String() string { return proto.CompactTextString(m) }
func (*ParseELFReply) ProtoMessage()    {}
func (*ParseELFReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c7237feaeed80f8, []int{1}
}

func (m *ParseELFReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParseELFReply.Unmarshal(m, b)
}
func (m *ParseELFReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParseELFReply.Marshal(b, m, deterministic)
}
func (m *ParseELFReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseELFReply.Merge(m, src)
}
func (m *ParseELFReply) XXX_Size() int {
	return xxx_messageInfo_ParseELFReply.Size(m)
}
func (m *ParseELFReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseELFReply.DiscardUnknown(m)
}

var xxx_messageInfo_ParseELFReply proto.InternalMessageInfo

func (m *ParseELFReply) GetNsects() int32 {
	if m != nil {
		return m.Nsects
	}
	return 0
}

func init() {
	proto.RegisterType((*ParseELFRequest)(nil), "alvriket.ParseELFRequest")
	proto.RegisterType((*ParseELFReply)(nil), "alvriket.ParseELFReply")
}

func init() { proto.RegisterFile("alvriket.proto", fileDescriptor_3c7237feaeed80f8) }

var fileDescriptor_3c7237feaeed80f8 = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0xcc, 0x29, 0x2b,
	0xca, 0xcc, 0x4e, 0x2d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x74,
	0xb8, 0xf8, 0x03, 0x12, 0x8b, 0x8a, 0x53, 0x5d, 0x7d, 0xdc, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b,
	0x4b, 0x84, 0x24, 0xb9, 0x38, 0x52, 0x73, 0xd2, 0xe2, 0x0b, 0x12, 0x4b, 0x32, 0x24, 0x18, 0x15,
	0x18, 0x35, 0x38, 0x83, 0xd8, 0x53, 0x73, 0xd2, 0x02, 0x12, 0x4b, 0x32, 0x94, 0xd4, 0xb9, 0x78,
	0x11, 0xaa, 0x0b, 0x72, 0x2a, 0x85, 0xc4, 0xb8, 0xd8, 0xf2, 0x8a, 0x53, 0x93, 0x4b, 0x8a, 0xc1,
	0x2a, 0x59, 0x83, 0xa0, 0x3c, 0x23, 0x5f, 0x2e, 0x4e, 0x57, 0x1f, 0x37, 0xb0, 0xda, 0x22, 0x21,
	0x07, 0x2e, 0x0e, 0x98, 0x2e, 0x21, 0x49, 0x3d, 0xb8, 0x53, 0xd0, 0xec, 0x95, 0x12, 0xc7, 0x26,
	0x55, 0x90, 0x53, 0xa9, 0xc4, 0x90, 0xc4, 0x06, 0x76, 0xb6, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff,
	0xd0, 0x4e, 0xba, 0x3c, 0xc8, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ELFParserClient is the client API for ELFParser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ELFParserClient interface {
	ParseELF(ctx context.Context, in *ParseELFRequest, opts ...grpc.CallOption) (*ParseELFReply, error)
}

type eLFParserClient struct {
	cc *grpc.ClientConn
}

func NewELFParserClient(cc *grpc.ClientConn) ELFParserClient {
	return &eLFParserClient{cc}
}

func (c *eLFParserClient) ParseELF(ctx context.Context, in *ParseELFRequest, opts ...grpc.CallOption) (*ParseELFReply, error) {
	out := new(ParseELFReply)
	err := c.cc.Invoke(ctx, "/alvriket.ELFParser/ParseELF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ELFParserServer is the server API for ELFParser service.
type ELFParserServer interface {
	ParseELF(context.Context, *ParseELFRequest) (*ParseELFReply, error)
}

// UnimplementedELFParserServer can be embedded to have forward compatible implementations.
type UnimplementedELFParserServer struct {
}

func (*UnimplementedELFParserServer) ParseELF(ctx context.Context, req *ParseELFRequest) (*ParseELFReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseELF not implemented")
}

func RegisterELFParserServer(s *grpc.Server, srv ELFParserServer) {
	s.RegisterService(&_ELFParser_serviceDesc, srv)
}

func _ELFParser_ParseELF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseELFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ELFParserServer).ParseELF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alvriket.ELFParser/ParseELF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ELFParserServer).ParseELF(ctx, req.(*ParseELFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ELFParser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "alvriket.ELFParser",
	HandlerType: (*ELFParserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParseELF",
			Handler:    _ELFParser_ParseELF_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "alvriket.proto",
}
