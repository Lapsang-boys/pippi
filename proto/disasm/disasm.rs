// This file is generated by rust-protobuf 2.7.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `disasm.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_7_0;

#[derive(PartialEq,Clone,Default)]
pub struct DisassembleRequest {
    // message fields
    pub bin_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DisassembleRequest {
    fn default() -> &'a DisassembleRequest {
        <DisassembleRequest as ::protobuf::Message>::default_instance()
    }
}

impl DisassembleRequest {
    pub fn new() -> DisassembleRequest {
        ::std::default::Default::default()
    }

    // string bin_id = 1;


    pub fn get_bin_id(&self) -> &str {
        &self.bin_id
    }
    pub fn clear_bin_id(&mut self) {
        self.bin_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_bin_id(&mut self, v: ::std::string::String) {
        self.bin_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bin_id(&mut self) -> &mut ::std::string::String {
        &mut self.bin_id
    }

    // Take field
    pub fn take_bin_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bin_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DisassembleRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bin_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.bin_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.bin_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.bin_id.is_empty() {
            os.write_string(1, &self.bin_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DisassembleRequest {
        DisassembleRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bin_id",
                    |m: &DisassembleRequest| { &m.bin_id },
                    |m: &mut DisassembleRequest| { &mut m.bin_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DisassembleRequest>(
                    "DisassembleRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DisassembleRequest {
        static mut instance: ::protobuf::lazy::Lazy<DisassembleRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DisassembleRequest,
        };
        unsafe {
            instance.get(DisassembleRequest::new)
        }
    }
}

impl ::protobuf::Clear for DisassembleRequest {
    fn clear(&mut self) {
        self.bin_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DisassembleRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DisassembleRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DisassembleReply {
    // message fields
    pub exec_sections: ::protobuf::RepeatedField<DisassembleSection>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DisassembleReply {
    fn default() -> &'a DisassembleReply {
        <DisassembleReply as ::protobuf::Message>::default_instance()
    }
}

impl DisassembleReply {
    pub fn new() -> DisassembleReply {
        ::std::default::Default::default()
    }

    // repeated .disasm.DisassembleSection exec_sections = 1;


    pub fn get_exec_sections(&self) -> &[DisassembleSection] {
        &self.exec_sections
    }
    pub fn clear_exec_sections(&mut self) {
        self.exec_sections.clear();
    }

    // Param is passed by value, moved
    pub fn set_exec_sections(&mut self, v: ::protobuf::RepeatedField<DisassembleSection>) {
        self.exec_sections = v;
    }

    // Mutable pointer to the field.
    pub fn mut_exec_sections(&mut self) -> &mut ::protobuf::RepeatedField<DisassembleSection> {
        &mut self.exec_sections
    }

    // Take field
    pub fn take_exec_sections(&mut self) -> ::protobuf::RepeatedField<DisassembleSection> {
        ::std::mem::replace(&mut self.exec_sections, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for DisassembleReply {
    fn is_initialized(&self) -> bool {
        for v in &self.exec_sections {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.exec_sections)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.exec_sections {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.exec_sections {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DisassembleReply {
        DisassembleReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DisassembleSection>>(
                    "exec_sections",
                    |m: &DisassembleReply| { &m.exec_sections },
                    |m: &mut DisassembleReply| { &mut m.exec_sections },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DisassembleReply>(
                    "DisassembleReply",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DisassembleReply {
        static mut instance: ::protobuf::lazy::Lazy<DisassembleReply> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DisassembleReply,
        };
        unsafe {
            instance.get(DisassembleReply::new)
        }
    }
}

impl ::protobuf::Clear for DisassembleReply {
    fn clear(&mut self) {
        self.exec_sections.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DisassembleReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DisassembleReply {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DisassembleSection {
    // message fields
    pub section: ::protobuf::SingularPtrField<super::bin::Section>,
    pub valid_offsets: ::std::vec::Vec<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DisassembleSection {
    fn default() -> &'a DisassembleSection {
        <DisassembleSection as ::protobuf::Message>::default_instance()
    }
}

impl DisassembleSection {
    pub fn new() -> DisassembleSection {
        ::std::default::Default::default()
    }

    // .bin.Section section = 1;


    pub fn get_section(&self) -> &super::bin::Section {
        self.section.as_ref().unwrap_or_else(|| super::bin::Section::default_instance())
    }
    pub fn clear_section(&mut self) {
        self.section.clear();
    }

    pub fn has_section(&self) -> bool {
        self.section.is_some()
    }

    // Param is passed by value, moved
    pub fn set_section(&mut self, v: super::bin::Section) {
        self.section = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_section(&mut self) -> &mut super::bin::Section {
        if self.section.is_none() {
            self.section.set_default();
        }
        self.section.as_mut().unwrap()
    }

    // Take field
    pub fn take_section(&mut self) -> super::bin::Section {
        self.section.take().unwrap_or_else(|| super::bin::Section::new())
    }

    // repeated uint64 valid_offsets = 2;


    pub fn get_valid_offsets(&self) -> &[u64] {
        &self.valid_offsets
    }
    pub fn clear_valid_offsets(&mut self) {
        self.valid_offsets.clear();
    }

    // Param is passed by value, moved
    pub fn set_valid_offsets(&mut self, v: ::std::vec::Vec<u64>) {
        self.valid_offsets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_valid_offsets(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.valid_offsets
    }

    // Take field
    pub fn take_valid_offsets(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.valid_offsets, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DisassembleSection {
    fn is_initialized(&self) -> bool {
        for v in &self.section {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.section)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.valid_offsets)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.section.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.valid_offsets {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.section.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.valid_offsets {
            os.write_uint64(2, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DisassembleSection {
        DisassembleSection::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::bin::Section>>(
                    "section",
                    |m: &DisassembleSection| { &m.section },
                    |m: &mut DisassembleSection| { &mut m.section },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "valid_offsets",
                    |m: &DisassembleSection| { &m.valid_offsets },
                    |m: &mut DisassembleSection| { &mut m.valid_offsets },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DisassembleSection>(
                    "DisassembleSection",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DisassembleSection {
        static mut instance: ::protobuf::lazy::Lazy<DisassembleSection> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DisassembleSection,
        };
        unsafe {
            instance.get(DisassembleSection::new)
        }
    }
}

impl ::protobuf::Clear for DisassembleSection {
    fn clear(&mut self) {
        self.section.clear();
        self.valid_offsets.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DisassembleSection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DisassembleSection {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cdisasm.proto\x12\x06disasm\x1a\tbin.proto\"+\n\x12DisassembleReque\
    st\x12\x15\n\x06bin_id\x18\x01\x20\x01(\tR\x05binId\"S\n\x10DisassembleR\
    eply\x12?\n\rexec_sections\x18\x01\x20\x03(\x0b2\x1a.disasm.DisassembleS\
    ectionR\x0cexecSections\"a\n\x12DisassembleSection\x12&\n\x07section\x18\
    \x01\x20\x01(\x0b2\x0c.bin.SectionR\x07section\x12#\n\rvalid_offsets\x18\
    \x02\x20\x03(\x04R\x0cvalidOffsets2U\n\x0cDisassembler\x12E\n\x0bDisasse\
    mble\x12\x1a.disasm.DisassembleRequest\x1a\x18.disasm.DisassembleReply\"\
    \0J\x84\x05\n\x06\x12\x04\0\0\x19\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x02\0\x0f\n\t\n\x02\x03\0\x12\x03\x04\0\x13\n\n\n\
    \x02\x06\0\x12\x04\x06\0\x08\x01\n\n\n\x03\x06\0\x01\x12\x03\x06\x08\x14\
    \n\x0b\n\x04\x06\0\x02\0\x12\x03\x07\x08J\n\x0c\n\x05\x06\0\x02\0\x01\
    \x12\x03\x07\x0c\x17\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x07\x19+\n\x0c\
    \n\x05\x06\0\x02\0\x03\x12\x03\x076F\n\n\n\x02\x04\0\x12\x04\n\0\r\x01\n\
    \n\n\x03\x04\0\x01\x12\x03\n\x08\x1a\n<\n\x04\x04\0\x02\0\x12\x03\x0c\
    \x08\x1a\x1a/\x20Binary\x20executable\x20ID\x20(lowercase\x20sha256\x20h\
    ash).\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x0c\x08\n\x1c\n\x0c\n\x05\x04\
    \0\x02\0\x05\x12\x03\x0c\x08\x0e\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0c\
    \x0f\x15\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0c\x18\x19\n\n\n\x02\x04\
    \x01\x12\x04\x0f\0\x12\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0f\x08\x18\n#\
    \n\x04\x04\x01\x02\0\x12\x03\x11\x086\x1a\x16\x20Executable\x20sections.\
    \n\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x11\x08\x10\n\x0c\n\x05\x04\x01\
    \x02\0\x06\x12\x03\x11\x11#\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x11$1\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1145\n\n\n\x02\x04\x02\x12\x04\
    \x14\0\x19\x01\n\n\n\x03\x04\x02\x01\x12\x03\x14\x08\x1a\nA\n\x04\x04\
    \x02\x02\0\x12\x03\x16\x08\x20\x1a4\x20Underlying\x20section\x20(or\x20s\
    egment)\x20of\x20the\x20exectuable.\n\n\r\n\x05\x04\x02\x02\0\x04\x12\
    \x04\x16\x08\x14\x1c\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x16\x08\x13\n\
    \x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x16\x14\x1b\n\x0c\n\x05\x04\x02\x02\
    \0\x03\x12\x03\x16\x1e\x1f\n<\n\x04\x04\x02\x02\x01\x12\x03\x18\x08*\x1a\
    /\x20Valid\x20byte\x20offsets\x20for\x20assembly\x20instructions.\n\n\
    \x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\x18\x08\x10\n\x0c\n\x05\x04\x02\
    \x02\x01\x05\x12\x03\x18\x11\x17\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\
    \x18\x18%\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x18()b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
