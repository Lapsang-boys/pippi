// This file is generated by rust-protobuf 2.7.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `strings.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_7_0;

#[derive(PartialEq,Clone,Default)]
pub struct StringsRequest {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StringsRequest {
    fn default() -> &'a StringsRequest {
        <StringsRequest as ::protobuf::Message>::default_instance()
    }
}

impl StringsRequest {
    pub fn new() -> StringsRequest {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for StringsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StringsRequest {
        StringsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &StringsRequest| { &m.id },
                    |m: &mut StringsRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StringsRequest>(
                    "StringsRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StringsRequest {
        static mut instance: ::protobuf::lazy::Lazy<StringsRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StringsRequest,
        };
        unsafe {
            instance.get(StringsRequest::new)
        }
    }
}

impl ::protobuf::Clear for StringsRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StringsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StringsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StringInfo {
    // message fields
    pub location: u64,
    pub raw_string: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StringInfo {
    fn default() -> &'a StringInfo {
        <StringInfo as ::protobuf::Message>::default_instance()
    }
}

impl StringInfo {
    pub fn new() -> StringInfo {
        ::std::default::Default::default()
    }

    // uint64 location = 1;


    pub fn get_location(&self) -> u64 {
        self.location
    }
    pub fn clear_location(&mut self) {
        self.location = 0;
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: u64) {
        self.location = v;
    }

    // string raw_string = 2;


    pub fn get_raw_string(&self) -> &str {
        &self.raw_string
    }
    pub fn clear_raw_string(&mut self) {
        self.raw_string.clear();
    }

    // Param is passed by value, moved
    pub fn set_raw_string(&mut self, v: ::std::string::String) {
        self.raw_string = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_raw_string(&mut self) -> &mut ::std::string::String {
        &mut self.raw_string
    }

    // Take field
    pub fn take_raw_string(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.raw_string, ::std::string::String::new())
    }
}

impl ::protobuf::Message for StringInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.location = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.raw_string)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.location != 0 {
            my_size += ::protobuf::rt::value_size(1, self.location, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.raw_string.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.raw_string);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.location != 0 {
            os.write_uint64(1, self.location)?;
        }
        if !self.raw_string.is_empty() {
            os.write_string(2, &self.raw_string)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StringInfo {
        StringInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "location",
                    |m: &StringInfo| { &m.location },
                    |m: &mut StringInfo| { &mut m.location },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "raw_string",
                    |m: &StringInfo| { &m.raw_string },
                    |m: &mut StringInfo| { &mut m.raw_string },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StringInfo>(
                    "StringInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StringInfo {
        static mut instance: ::protobuf::lazy::Lazy<StringInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StringInfo,
        };
        unsafe {
            instance.get(StringInfo::new)
        }
    }
}

impl ::protobuf::Clear for StringInfo {
    fn clear(&mut self) {
        self.location = 0;
        self.raw_string.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StringInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StringInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StringsReply {
    // message fields
    pub strings: ::protobuf::RepeatedField<StringInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StringsReply {
    fn default() -> &'a StringsReply {
        <StringsReply as ::protobuf::Message>::default_instance()
    }
}

impl StringsReply {
    pub fn new() -> StringsReply {
        ::std::default::Default::default()
    }

    // repeated .strings.StringInfo strings = 1;


    pub fn get_strings(&self) -> &[StringInfo] {
        &self.strings
    }
    pub fn clear_strings(&mut self) {
        self.strings.clear();
    }

    // Param is passed by value, moved
    pub fn set_strings(&mut self, v: ::protobuf::RepeatedField<StringInfo>) {
        self.strings = v;
    }

    // Mutable pointer to the field.
    pub fn mut_strings(&mut self) -> &mut ::protobuf::RepeatedField<StringInfo> {
        &mut self.strings
    }

    // Take field
    pub fn take_strings(&mut self) -> ::protobuf::RepeatedField<StringInfo> {
        ::std::mem::replace(&mut self.strings, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for StringsReply {
    fn is_initialized(&self) -> bool {
        for v in &self.strings {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.strings)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.strings {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.strings {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StringsReply {
        StringsReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<StringInfo>>(
                    "strings",
                    |m: &StringsReply| { &m.strings },
                    |m: &mut StringsReply| { &mut m.strings },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StringsReply>(
                    "StringsReply",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StringsReply {
        static mut instance: ::protobuf::lazy::Lazy<StringsReply> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StringsReply,
        };
        unsafe {
            instance.get(StringsReply::new)
        }
    }
}

impl ::protobuf::Clear for StringsReply {
    fn clear(&mut self) {
        self.strings.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StringsReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StringsReply {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rstrings.proto\x12\x07strings\"\x20\n\x0eStringsRequest\x12\x0e\n\x02\
    id\x18\x01\x20\x01(\tR\x02id\"G\n\nStringInfo\x12\x1a\n\x08location\x18\
    \x01\x20\x01(\x04R\x08location\x12\x1d\n\nraw_string\x18\x02\x20\x01(\tR\
    \trawString\"=\n\x0cStringsReply\x12-\n\x07strings\x18\x01\x20\x03(\x0b2\
    \x13.strings.StringInfoR\x07strings2V\n\x10StringsExtractor\x12B\n\x0eEx\
    tractStrings\x12\x17.strings.StringsRequest\x1a\x15.strings.StringsReply\
    \"\0J\xd9\x03\n\x06\x12\x04\0\0\x14\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\
    \n\x08\n\x01\x02\x12\x03\x02\0\x10\n\n\n\x02\x06\0\x12\x04\x04\0\x06\x01\
    \n\n\n\x03\x06\0\x01\x12\x03\x04\x08\x18\n\x0b\n\x04\x06\0\x02\0\x12\x03\
    \x05\x03@\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x05\x07\x15\n\x0c\n\x05\
    \x06\0\x02\0\x02\x12\x03\x05\x17%\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\
    \x050<\n\n\n\x02\x04\0\x12\x04\x08\0\x0b\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x08\x08\x16\n\x1a\n\x04\x04\0\x02\0\x12\x03\n\x03\x11\x1a\r\x20ID\x20of\
    \x20file.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04\n\x03\x08\x18\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03\n\x03\t\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\n\n\
    \x0c\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\n\x0f\x10\n\n\n\x02\x04\x01\x12\
    \x04\r\0\x10\x01\n\n\n\x03\x04\x01\x01\x12\x03\r\x08\x12\n\x0b\n\x04\x04\
    \x01\x02\0\x12\x03\x0e\x08\x1c\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x0e\
    \x08\r\x14\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0e\x08\x0e\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x0e\x0f\x17\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\x0e\x1a\x1b\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0f\x08\x1e\n\r\n\
    \x05\x04\x01\x02\x01\x04\x12\x04\x0f\x08\x0e\x1c\n\x0c\n\x05\x04\x01\x02\
    \x01\x05\x12\x03\x0f\x08\x0e\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0f\
    \x0f\x19\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0f\x1c\x1d\n\n\n\x02\
    \x04\x02\x12\x04\x12\0\x14\x01\n\n\n\x03\x04\x02\x01\x12\x03\x12\x08\x14\
    \n\x0b\n\x04\x04\x02\x02\0\x12\x03\x13\x03#\n\x0c\n\x05\x04\x02\x02\0\
    \x04\x12\x03\x13\x03\x0b\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x13\x0c\
    \x16\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x13\x17\x1e\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x03\x13!\"b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
