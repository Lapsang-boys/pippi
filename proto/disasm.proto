syntax = "proto3";

package disasm;

option go_package = "github.com/lapsang-boys/pippi/proto/disasm";

import "bin.proto";

service Disassembler {
	rpc Disassemble(DisassembleRequest) returns (DisassembleReply) {}
}

message DisassembleRequest {
	// Binary ID.
	string bin_id = 1;
	// Machine architecture specifying the Instruction Set Architecture (ISA) to
	// disassemble.
	bin.Arch arch = 2;
	// Addresses of instructions to disassemble.
	repeated uint64 inst_addrs = 3;
}

message DisassembleReply {
	// Disassembled instructions.
	repeated Instruction insts = 1;
}

// Instruction is an assembly instruction of a given machine architecture.
message Instruction {
	// Instruction address.
	uint64 addr = 1;
	// Instruction string representation.
	string inst_str = 2;
	// TODO: also include op_code and ops?
}
