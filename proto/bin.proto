syntax = "proto3";

package bin;

service BinaryParser {
	rpc ParseBinary (ParseBinaryRequest) returns (File) {}
}

message ParseBinaryRequest {
	// Binary executable ID (lowercase sha256 hash).
	string bin_id = 1;
}

// A File is a binary exectuable.
message File {
	// Machine architecture specifying the assembly instruction set.
	Arch arch = 1;
	// Entry point of the executable.
	uint64 entry = 2;
	// Sections (and segments) of the exectuable.
	repeated Section sections = 3;
	// Function imports.
	repeated Func imports = 4;
	// Function exports.
	repeated Func exports = 5;
}

// Arch represents the set of machine architectures.
enum Arch {
	// 32-bit x86 machine architecture, as used by Intel and AMD.
	X86_32 = 0;
	// 64-bit x86-64 machine architecture, as used by Intel and AMD.
	X86_64 = 1;
	// 32-bit MIPS machine architecture.
	MIPS_32 = 2;
	// 32-bit PowerPC machine architecture.
	PowerPC_32 = 3;
}

// A Func is an imported or exported function.
message Func {
	// Function address.
	uint64 addr = 1;
	// Function name.
	string name = 2;
}

// A Section represents a continuous section of memory.
message Section {
	// Section name; or empty if unnamed section or memory segment.
	string name = 1;
	// Start address of section.
	uint64 addr = 2;
	// File offset of section.
	uint64 offset = 3;
	// Length of section in number of bytes; excluding section alignment padding.
	uint64 length = 4;
	// Size in bytes of the section contents in the executable file; including
	// section alignment padding.
	//
	// file_size is larger than mem_size for sections padded to section alignment
	// in the executable file.
	uint64 file_size = 5;
	// Size in bytes of the section contents when loaded into memory.
	//
	// mem_size is larger than file_size for sections containing uninitialized
	// data not part of the executable file.
	uint64 mem_size = 6;
	// Access permissions of the section in memory.
	repeated Perm perms = 7;
}

// Access permissions.
enum Perm {
	// Memory is readable.
	R = 0;
	// Memory is writeable.
	W = 1;
	// Memory is executable.
	X = 2;
}
