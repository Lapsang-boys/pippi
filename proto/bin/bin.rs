// This file is generated by rust-protobuf 2.7.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `bin.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_7_0;

#[derive(PartialEq,Clone,Default)]
pub struct ParseBinaryRequest {
    // message fields
    pub bin_path: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ParseBinaryRequest {
    fn default() -> &'a ParseBinaryRequest {
        <ParseBinaryRequest as ::protobuf::Message>::default_instance()
    }
}

impl ParseBinaryRequest {
    pub fn new() -> ParseBinaryRequest {
        ::std::default::Default::default()
    }

    // string bin_path = 1;


    pub fn get_bin_path(&self) -> &str {
        &self.bin_path
    }
    pub fn clear_bin_path(&mut self) {
        self.bin_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_bin_path(&mut self, v: ::std::string::String) {
        self.bin_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bin_path(&mut self) -> &mut ::std::string::String {
        &mut self.bin_path
    }

    // Take field
    pub fn take_bin_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bin_path, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ParseBinaryRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bin_path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.bin_path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.bin_path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.bin_path.is_empty() {
            os.write_string(1, &self.bin_path)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ParseBinaryRequest {
        ParseBinaryRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bin_path",
                    |m: &ParseBinaryRequest| { &m.bin_path },
                    |m: &mut ParseBinaryRequest| { &mut m.bin_path },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ParseBinaryRequest>(
                    "ParseBinaryRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ParseBinaryRequest {
        static mut instance: ::protobuf::lazy::Lazy<ParseBinaryRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ParseBinaryRequest,
        };
        unsafe {
            instance.get(ParseBinaryRequest::new)
        }
    }
}

impl ::protobuf::Clear for ParseBinaryRequest {
    fn clear(&mut self) {
        self.bin_path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ParseBinaryRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ParseBinaryRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ParseBinaryReply {
    // message fields
    pub nsects: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ParseBinaryReply {
    fn default() -> &'a ParseBinaryReply {
        <ParseBinaryReply as ::protobuf::Message>::default_instance()
    }
}

impl ParseBinaryReply {
    pub fn new() -> ParseBinaryReply {
        ::std::default::Default::default()
    }

    // int32 nsects = 1;


    pub fn get_nsects(&self) -> i32 {
        self.nsects
    }
    pub fn clear_nsects(&mut self) {
        self.nsects = 0;
    }

    // Param is passed by value, moved
    pub fn set_nsects(&mut self, v: i32) {
        self.nsects = v;
    }
}

impl ::protobuf::Message for ParseBinaryReply {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.nsects = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.nsects != 0 {
            my_size += ::protobuf::rt::value_size(1, self.nsects, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.nsects != 0 {
            os.write_int32(1, self.nsects)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ParseBinaryReply {
        ParseBinaryReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "nsects",
                    |m: &ParseBinaryReply| { &m.nsects },
                    |m: &mut ParseBinaryReply| { &mut m.nsects },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ParseBinaryReply>(
                    "ParseBinaryReply",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ParseBinaryReply {
        static mut instance: ::protobuf::lazy::Lazy<ParseBinaryReply> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ParseBinaryReply,
        };
        unsafe {
            instance.get(ParseBinaryReply::new)
        }
    }
}

impl ::protobuf::Clear for ParseBinaryReply {
    fn clear(&mut self) {
        self.nsects = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ParseBinaryReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ParseBinaryReply {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\tbin.proto\x12\x03bin\"/\n\x12ParseBinaryRequest\x12\x19\n\x08bin_pat\
    h\x18\x01\x20\x01(\tR\x07binPath\"*\n\x10ParseBinaryReply\x12\x16\n\x06n\
    sects\x18\x01\x20\x01(\x05R\x06nsects2O\n\x0cBinaryParser\x12?\n\x0bPars\
    eBinary\x12\x17.bin.ParseBinaryRequest\x1a\x15.bin.ParseBinaryReply\"\0J\
    \xde\x02\n\x06\x12\x04\0\0\x10\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\
    \n\x01\x02\x12\x03\x02\0\x0c\n\n\n\x02\x06\0\x12\x04\x04\0\x06\x01\n\n\n\
    \x03\x06\0\x01\x12\x03\x04\x08\x14\n\x0b\n\x04\x06\0\x02\0\x12\x03\x05\
    \x03E\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x05\x07\x12\n\x0c\n\x05\x06\0\
    \x02\0\x02\x12\x03\x05\x14&\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x051A\n\
    \n\n\x02\x04\0\x12\x04\x08\0\x0b\x01\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\
    \x1a\n+\n\x04\x04\0\x02\0\x12\x03\n\x03\x17\x1a\x1e\x20Binary\x20executa\
    ble\x20file\x20path.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04\n\x03\x08\x1c\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03\n\x03\t\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03\n\n\x12\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\n\x15\x16\n\n\n\x02\
    \x04\x01\x12\x04\r\0\x10\x01\n\n\n\x03\x04\x01\x01\x12\x03\r\x08\x18\n\"\
    \n\x04\x04\x01\x02\0\x12\x03\x0f\x03\x14\x1a\x15\x20Number\x20of\x20sect\
    ions.\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x0f\x03\r\x1a\n\x0c\n\x05\
    \x04\x01\x02\0\x05\x12\x03\x0f\x03\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03\x0f\t\x0f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0f\x12\x13b\x06pro\
    to3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
