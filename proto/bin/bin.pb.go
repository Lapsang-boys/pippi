// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bin.proto

package bin

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ParseBinaryRequest struct {
	// Binary executable file path.
	BinPath              string   `protobuf:"bytes,1,opt,name=bin_path,json=binPath,proto3" json:"bin_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParseBinaryRequest) Reset()         { *m = ParseBinaryRequest{} }
func (m *ParseBinaryRequest) String() string { return proto.CompactTextString(m) }
func (*ParseBinaryRequest) ProtoMessage()    {}
func (*ParseBinaryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_af36b52e36742298, []int{0}
}

func (m *ParseBinaryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParseBinaryRequest.Unmarshal(m, b)
}
func (m *ParseBinaryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParseBinaryRequest.Marshal(b, m, deterministic)
}
func (m *ParseBinaryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseBinaryRequest.Merge(m, src)
}
func (m *ParseBinaryRequest) XXX_Size() int {
	return xxx_messageInfo_ParseBinaryRequest.Size(m)
}
func (m *ParseBinaryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseBinaryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ParseBinaryRequest proto.InternalMessageInfo

func (m *ParseBinaryRequest) GetBinPath() string {
	if m != nil {
		return m.BinPath
	}
	return ""
}

type ParseBinaryReply struct {
	// Number of sections.
	Nsects               int32    `protobuf:"varint,1,opt,name=nsects,proto3" json:"nsects,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParseBinaryReply) Reset()         { *m = ParseBinaryReply{} }
func (m *ParseBinaryReply) String() string { return proto.CompactTextString(m) }
func (*ParseBinaryReply) ProtoMessage()    {}
func (*ParseBinaryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_af36b52e36742298, []int{1}
}

func (m *ParseBinaryReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParseBinaryReply.Unmarshal(m, b)
}
func (m *ParseBinaryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParseBinaryReply.Marshal(b, m, deterministic)
}
func (m *ParseBinaryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseBinaryReply.Merge(m, src)
}
func (m *ParseBinaryReply) XXX_Size() int {
	return xxx_messageInfo_ParseBinaryReply.Size(m)
}
func (m *ParseBinaryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseBinaryReply.DiscardUnknown(m)
}

var xxx_messageInfo_ParseBinaryReply proto.InternalMessageInfo

func (m *ParseBinaryReply) GetNsects() int32 {
	if m != nil {
		return m.Nsects
	}
	return 0
}

func init() {
	proto.RegisterType((*ParseBinaryRequest)(nil), "bin.ParseBinaryRequest")
	proto.RegisterType((*ParseBinaryReply)(nil), "bin.ParseBinaryReply")
}

func init() { proto.RegisterFile("bin.proto", fileDescriptor_af36b52e36742298) }

var fileDescriptor_af36b52e36742298 = []byte{
	// 151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0xca, 0xcc, 0xd3,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0xca, 0xcc, 0x53, 0xd2, 0xe7, 0x12, 0x0a, 0x48,
	0x2c, 0x2a, 0x4e, 0x75, 0xca, 0xcc, 0x4b, 0x2c, 0xaa, 0x0c, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e,
	0x11, 0x92, 0xe4, 0xe2, 0x48, 0xca, 0xcc, 0x8b, 0x2f, 0x48, 0x2c, 0xc9, 0x90, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0x0c, 0x62, 0x4f, 0xca, 0xcc, 0x0b, 0x48, 0x2c, 0xc9, 0x50, 0xd2, 0xe2, 0x12, 0x40,
	0xd1, 0x50, 0x90, 0x53, 0x29, 0x24, 0xc6, 0xc5, 0x96, 0x57, 0x9c, 0x9a, 0x5c, 0x52, 0x0c, 0x56,
	0xcc, 0x1a, 0x04, 0xe5, 0x19, 0xf9, 0x73, 0xf1, 0x40, 0x94, 0x81, 0x75, 0x14, 0x09, 0xd9, 0x73,
	0x71, 0x23, 0xe9, 0x15, 0x12, 0xd7, 0x03, 0x39, 0x06, 0xd3, 0x7a, 0x29, 0x51, 0x4c, 0x89, 0x82,
	0x9c, 0x4a, 0x25, 0x86, 0x24, 0x36, 0xb0, 0xcb, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xec,
	0x63, 0xd9, 0x3d, 0xc6, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BinaryParserClient is the client API for BinaryParser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BinaryParserClient interface {
	ParseBinary(ctx context.Context, in *ParseBinaryRequest, opts ...grpc.CallOption) (*ParseBinaryReply, error)
}

type binaryParserClient struct {
	cc *grpc.ClientConn
}

func NewBinaryParserClient(cc *grpc.ClientConn) BinaryParserClient {
	return &binaryParserClient{cc}
}

func (c *binaryParserClient) ParseBinary(ctx context.Context, in *ParseBinaryRequest, opts ...grpc.CallOption) (*ParseBinaryReply, error) {
	out := new(ParseBinaryReply)
	err := c.cc.Invoke(ctx, "/bin.BinaryParser/ParseBinary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinaryParserServer is the server API for BinaryParser service.
type BinaryParserServer interface {
	ParseBinary(context.Context, *ParseBinaryRequest) (*ParseBinaryReply, error)
}

// UnimplementedBinaryParserServer can be embedded to have forward compatible implementations.
type UnimplementedBinaryParserServer struct {
}

func (*UnimplementedBinaryParserServer) ParseBinary(ctx context.Context, req *ParseBinaryRequest) (*ParseBinaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseBinary not implemented")
}

func RegisterBinaryParserServer(s *grpc.Server, srv BinaryParserServer) {
	s.RegisterService(&_BinaryParser_serviceDesc, srv)
}

func _BinaryParser_ParseBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseBinaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryParserServer).ParseBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bin.BinaryParser/ParseBinary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryParserServer).ParseBinary(ctx, req.(*ParseBinaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BinaryParser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bin.BinaryParser",
	HandlerType: (*BinaryParserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParseBinary",
			Handler:    _BinaryParser_ParseBinary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bin.proto",
}
