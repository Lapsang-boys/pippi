version: 2

references:
  workspace_root: &workspace_root
    ./
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

jobs:
  style-go:
    docker:
      - image: circleci/golang:1.13

    steps:
      - checkout
      - run:
          name: "Enforce Go Formatted Code"
          command: "! go fmt ./... 2>&1 | read"

  generate-proto:
    docker:
      - image: karlekdocker/pippi:0.0.5

    steps:
      - *attach_workspace
      - checkout # check out source code to working directory
      - run:
          name: Generate protobuf code
          command: |
            make -C ./proto

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - ./proto

  build-pippi:
    docker:
      - image: karlekdocker/pippi:0.0.5

    environment: # environment variables for the build itself
      NG_CLI_ANALYTICS: false # https://stackoverflow.com/a/57586959

    steps:
      - checkout # check out source code to working directory

      - restore_cache:
          keys:
            - pippi-hash

      - run:
          name: Finish early if no change
          command: |
              cd cmd/pippi
              find . -not -path "*/node_modules/*" -type f \( -exec sha1sum "$PWD"/{} \; \) | sha1sum | awk '{ print $1 }' > new-pippi-hash
              if [ "$(cat new-pippi-hash)" == "$(cat pippi-hash)" ]; then
                  circleci-agent step halt
              else
                  mv new-pippi-hash pippi-hash
              fi

      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - pippi-go-mod-cache-{{ checksum "go.sum" }}

      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - pippi-npm-cache-{{ checksum "./cmd/pippi/frontend/package.json.md5" }}

      - run:
          name: Run make
          command: |
            make -C cmd/pippi

      - save_cache:
          key: pippi-hash
          paths:
              - "./cmd/pippi/pippi-hash"

      - save_cache:
          key: pippi-go-mod-cache-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

      - save_cache:
          key: pippi-npm-cache-{{ checksum "./cmd/pippi/frontend/package.json.md5" }}
          paths:
            - "./cmd/pippi/frontend/node_modules"

  build-pi-upload:
    docker:
      - image: circleci/golang:1.13

    steps:
      - checkout # check out source code to working directory
      - *attach_workspace

      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - pi-upload-go-mod-cache-{{ checksum "go.sum" }}

      - run:
          name: Run make
          command: |
            make -C cmd/pi-upload

      - save_cache:
          key: pi-upload-go-mod-cache-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

  build-pi-disasm-new:
    docker:
      - image: circleci/golang:1.13

    steps:
      - checkout # check out source code to working directory
      - *attach_workspace

      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - pi-disasm-new-mod-cache-{{ checksum "go.sum" }}

      - run:
          name: Run make
          command: |
            make -C cmd/pi-disasm-new

      - save_cache:
          key: pi-disasm-new-mod-cache-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

  build-pi-disasm-objdump:
    docker:
      - image: circleci/golang:1.13

    steps:
      - checkout # check out source code to working directory
      - *attach_workspace

      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - pi-disasm-objdump-mod-cache-{{ checksum "go.sum" }}

      - run:
          name: Run make
          command: |
            make -C cmd/pi-disasm-objdump

      - save_cache:
          key: pi-disasm-objdump-mod-cache-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

  build-pi-bin:
    docker:
      - image: circleci/golang:1.13

    steps:
      - checkout # check out source code to working directory
      - *attach_workspace

      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - pi-bin-go-mod-cache-{{ checksum "go.sum" }}

      - run:
          name: Run make
          command: |
            make -C cmd/pi-bin

      - save_cache:
          key: pi-bin-go-mod-cache-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

  build-pi-strings:
    docker:
      - image: karlekdocker/pippi:0.0.5

    steps:
      - checkout # check out source code to working directory
      - *attach_workspace

      - run:
          name: Calculate dependencies
          command: |
            cd ./cmd/pi-strings
            rustc --version > rust-version
            test -e Cargo.lock || cargo generate-lockfile

      - restore_cache:
          keys:
            - pi-strings-rust-cache-{{checksum "./cmd/pi-strings/rust-version"}}-{{checksum "./cmd/pi-strings/Cargo.lock"}}

      - run:
          name: Run make
          command: |
            make -C cmd/pi-strings

      - save_cache:
          paths:
            - /root/.cargo/registry
            - ./cmd/pi-strings/target
          key: pi-strings-rust-cache-{{checksum "./cmd/pi-strings/rust-version"}}-{{checksum "./cmd/pi-strings/Cargo.lock"}}

workflows:
  version: 2
  build-workflow:
    jobs:
      - style-go:
          filters:
            branches:
              only: master

      - generate-proto:
          filters:
            branches:
              only: master

      - build-pi-upload:
          filters:
            branches:
              only: master
          requires:
            - generate-proto

      - build-pi-bin:
          filters:
            branches:
              only: master
          requires:
            - generate-proto

      - build-pi-disasm-new:
          filters:
            branches:
              only: master
          requires:
            - generate-proto

      - build-pi-disasm-objdump:
          filters:
            branches:
              only: master
          requires:
            - generate-proto

      - build-pi-strings:
          filters:
            branches:
              only: master
          requires:
            - generate-proto

      - build-pippi:
          filters:
            branches:
              only: master
